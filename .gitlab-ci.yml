#image: docker:19.03
#before_script:
  #  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
stages: 
           # List of stages for jobs, and their order of execution
  - test1 
  - build
  - test2
  - deploy

.test_meteo:
  image : node
  tags:
    - ms-icd
  stage : test1

.test_docker:
  tags:
    - ms-icd
  image : hadolint/hadolint:latest-debian
  stage: test1


test_jshint:
    extends: .test_meteo
    script:
        - npm install -g jshint
        - jshint src > result-jshint.txt || exit 0
    
    artifacts:
        paths:
         - result-jshint.txt

test_standardJS:
    extends: .test_meteo
    script:
        - npm install standard --global
        - npx standard > result-standardJS.txt || exit 0
    artifacts:
        paths:
         - result-standardJS.txt

test_stylelint:
    extends: .test_meteo
    script:
        - npm install -g csslint
        - csslint --version
        - csslint dist/assets/index.e2dd1dbf.css > result-csslint.txt || exit 0
    artifacts:
        paths:
         - result-csslint.txt

lint_html_validate:
  extends: .test_meteo
  artifacts:
      paths:
          - lint_html.txt
  script:
    - npm install -g html-validate
    - html-validate ./index.html | tee lint_html.txt || true

lint_htmlhint:
  extends: .test_meteo
  artifacts:
      paths:
          - lint_htmlhint.txt
  script:
    - npm install -g htmlhint
    - htmlhint dist/index.html > lint_htmlhint.txt || exit 0

lint_eslint:
  extends: .test_meteo
  artifacts:
      paths:
          - lint_js.txt
  script:
    - npm install eslint --save-dev
    - npm run lint | tee lint_js.txt || true

lint_docker1:
  extends: .test_docker
  artifacts:
      paths:
          - lint_docker1.txt
  script:
    - hadolint ./Dockerfile1 | tee lint_docker1.txt || true

lint_docker2:
  extends: .test_docker
  artifacts:
      paths:
          - lint_docker2.txt
  script:
    - hadolint ./Dockerfile2 | tee lint_docker2.txt || true


.install_firefox_geckodriver: &install_firefox_geckodriver
  - apt-get update && apt-get upgrade --assume-yes
  - apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils --assume-yes
  - wget -nv -O ~/FirefoxSetup.tar.bz2 "https://download.mozilla.org/?product=firefox-latest&os=linux64"
  - tar xjf ~/FirefoxSetup.tar.bz2 -C /opt/
  - ln -s /opt/firefox/firefox /usr/lib/firefox
  - export PATH=$PATH:/opt/firefox/
  - wget -nv -O ~/geckodriver.tar.gz "https://github.com/mozilla/geckodriver/releases/download/v0.28.0/geckodriver-v0.28.0-linux64.tar.gz"
  - tar -zxvf ~/geckodriver.tar.gz -C /opt/
  - export PATH=$PATH:/opt/

  
test_Automation:
  image: python:3.8
  stage: test1
  tags:
    - ms-icd
  services:
    - selenium/standalone-firefox:latest
  artifacts:
      paths:
        - automation_selenium.txt
  script:
    - *install_firefox_geckodriver
    - pip install 'selenium<4.0.0' # Nous avons rétrogradé Selenium aux niveaux 3 car nous avons une ancienne version de geckodriver
    - pip install selenium pytest
    - pytest | tee automation_selenium.txt || true

build1-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - ms-icd
  image: node:18.15.0
  script:
    - npm install
    - npm run build
  artifacts:
   paths:
      - dist
  when: always

build2-job:
  needs: 
    - build1-job  
      # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - meteo-cicd
  image: docker:19.03
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/meteoprod -f Dockerfile2 .
    - docker push $CI_REGISTRY_IMAGE/meteoprod 

html_dist:
  stage: test2
  image : node
  tags:
    - ms-icd

  script:
    - npm install -g html-validate
    - html-validate dist/index.html | tee html_dist.txt || true

  artifacts:
    paths:
        - html_dist.txt

eslint_dist:
    stage: test2
    image : node
    tags:
      - ms-icd
    script:
      - npm install eslint --save-dev
      - npm run lint | tee eslint_dist.txt || true
    artifacts:
        paths:
         - eslint_dist.txt



pages:
    stage: deploy
    image: ubuntu
    tags : 
      - ms-icd 
    artifacts:
        paths:
            - public/
    script:
        - cp pages/index.html public/ 
        - cp result-jshint.txt public/
        - cp result-standardJS.txt public/
        - cp result-csslint.txt public/
        - cp lint_html.txt public/
        - cp lint_htmlhint.txt public/
        - cp lint_js.txt public/
        - cp lint_docker1.txt public/
        - cp lint_docker2.txt public/
        - cp automation_selenium.txt public/
        - cp html_dist.txt public/
        - cp eslint_dist.txt public/
        
        

